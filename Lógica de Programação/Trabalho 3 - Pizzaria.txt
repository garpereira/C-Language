#include <stdio.h>
#include <string.h>
#include <ctype.h>

typedef struct{
    char nome_cliente[30];
    char end_rua[30];
    char end_num[20];
    char end_bairro[30];
    char end_cidade[30];
    char nome_pizza[20];
    char descricao[100];
    int telefone;
    int cod_pizza;
    int qtd_pizza;
    int num_pedido;
    int motoqueiro;
    int situacao;
    int avaliacao;
    int pedidos;
    float valor;
    float valores;
    float total;
}cadastro;

int pizzaria(cadastro pizza[10], cadastro pedido[10]);//declarei aqui porque esta sendo chamada antes de ser declarada
int usuario(cadastro cliente[10], cadastro pizza[10], cadastro pedido[10]);//                     //

int cadastrarcliente(cadastro cliente[10]){
    int telefone, i, k, posicao = -1, confirma, adiciona, verifica;
    char nome[30], end_rua[30],end_num[20],end_bairro[30], end_cidade[30];
    while(posicao < 10 || adiciona != 1) {
        posicao = -1;
        for (i = 0; i < 10; i++) {
            if (cliente[i].telefone == -1) {//lendo apenas posicoes vazias
                posicao = i;
                break;
            }
        }
        if (posicao == -1) {//se posicao continuar igual a -1, entao nao tem espaços vazios
            printf("\nCadastro esta cheio\n");
            return 1;
            //usuario(cliente);
            //fazerpedido
        }
        printf("\nDigite o telefone para cadastro\n");
        scanf("%d", &telefone);
        for(i=0;i<10;i++){
            if(cliente[i].telefone == telefone){
                printf("\nJa existe um cadastro com esse telefone\n");
                return 2;
                //cadastrarcliente(cliente);
                //fazerpedido -> cadastrarcliente
            }
        }
        getchar();
        printf("\nDigite nome do cliente\n");
        scanf("%[^\n]",nome);
        for(i=0;nome[i] != '\0';i++){
            nome[i] = toupper(nome[i]);
        }
        getchar();
        printf("\nDigite o endereco\nRua\n");
        scanf("%[^\n]",end_rua);
        for(i=0;end_rua[i] != '\0';i++){
            end_rua[i] = toupper(end_rua[i]);
        }
        getchar();
        printf("\nNumero/Bloco e AP\n");
        scanf("%[^\n]",end_num);
        for(i=0;end_num[i] != '\0';i++){
            end_num[i] = toupper(end_num[i]);
        }
        getchar();
        printf("\nBairro\n");
        scanf("%[^\n]",end_bairro);
        for(i=0;end_bairro[i] != '\0';i++){
            end_bairro[i] = toupper(end_bairro[i]);
        }
        getchar();
        printf("\nCidade\n");
        scanf("%[^\n]",end_cidade);
        for(i=0;end_cidade[i] != '\0';i++){
            end_cidade[i] = toupper(end_cidade[i]);
        }
        cliente[posicao].telefone = telefone;
        strcpy(cliente[posicao].nome_cliente,nome);
        strcpy(cliente[posicao].end_rua,end_rua);
        strcpy(cliente[posicao].end_num,end_num);
        strcpy(cliente[posicao].end_bairro,end_bairro);
        strcpy(cliente[posicao].end_cidade,end_cidade);
        printf("\nO seguinte cadastro foi realizado com sucesso\nNome: %s\nTelefone: %d\nEndereco: %s\nNumero/Bloco: %s\nBairro: %s\nCidade: %s\n",cliente[posicao].nome_cliente,cliente[posicao].telefone,cliente[posicao].end_rua,cliente[posicao].end_num,cliente[posicao].end_bairro,cliente[posicao].end_cidade);
        if(posicao+1 == 10){
            printf("\nCadastro esta completo\n");
            return 1;
            //usuario(cliente);
            //fazerpedido;
        }
        printf("\nDeseja cadastrar mais clientes?\n(0) Sim (1) Nao\n");
        scanf("%d", &adiciona);
        while(adiciona < 0 || adiciona > 1){
            printf("\nOpcao invalida\n");
            scanf("%d", &adiciona);
        }
        if(adiciona == 1){
            return 1;
            //usuario(cliente);
            //fazerpedido;
        }
    }
}

int alteracliente(cadastro cliente[10]){
    int procura, telefone, i, menu1=-1, k, confirma, verifica;
    char nome[30], end_rua[30], end_bairro[20], end_num[20], end_cidade[30];
    printf("\nQual cadastro deseja alterar?\n(1) Procura por telefone (2) Procura por nome (0) Voltar\n");
    scanf("%d", &procura);
    if(procura == 1){
        getchar();
        printf("\nDigite o telefone cadastrado\n");
        scanf("%d", &telefone);
        for(i=0;i<10;i++){
            if(cliente[i].telefone == telefone){
                while(menu1 != 0){
                    printf("\nNome: %s\nTelefone: %d\nEndereco: %s\nNumero/Bloco e AP: %s\nBairro: %s\nCidade: %s\n",cliente[i].nome_cliente,cliente[i].telefone,cliente[i].end_rua,cliente[i].end_num,cliente[i].end_bairro,cliente[i].end_cidade);
                    printf("\nQual dado deseja alterar?\n(1) Nome (2) Telefone (3) Endereco (4) Numero/Bloco e AP (5) Bairro (6) Cidade (7) Alterar outro cadastro (0) Voltar\n");
                    scanf("%d",&menu1);
                    switch(menu1){
                    case 1:
                        getchar();
                        printf("\nQual o novo nome?\n");
                        scanf("%[^\n]", nome);
                        getchar();
                        printf("\nConfirma novo nome?\n(0) Sim (1) Nao\n");
                        scanf("%d", &confirma);
                        while(confirma < 0 || confirma > 1){
                            printf("\nOpcao invalida\n");
                            scanf("%d", &confirma);
                        }
                        while(confirma == 1){
                            getchar();
                            printf("\nQual o novo nome?\n");
                            scanf("%[^\n]",nome);
                            for(k=0;nome[k] != '\0';k++){
                                nome[k] = toupper(nome[k]);
                            }
                            getchar();
                            printf("\nConfirma novo nome?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma < 0 || confirma > 1){
                                printf("\nOpcao invalida\n");
                                scanf("%d", &confirma);
                            }
                        }
                        for(k=0;nome[k] != '\0';k++){
                            nome[k] = toupper(nome[k]);
                        }
                        strcpy(cliente[i].nome_cliente,nome);
                        printf("\nNome alterado com sucesso\n");
                        break;
                    case 2:
                        getchar();
                        printf("\nQual o novo telefone?\n");
                        scanf("%d", &telefone);
                            for(k=0;k<10;k++){
                                while(cliente[k].telefone == telefone){
                                    printf("\nJa existe um cadastro com esse telefone\n");
                                    getchar();
                                    printf("\nQual o novo telefone?\n");
                                    scanf("%d", &telefone);
                                    if(cliente[k].telefone != telefone){
                                        k = 0;
                                        break;
                                    }
                                }
                                if(k == 9 && cliente[k].telefone != telefone){
                                    break;
                                }
                            }
                        getchar();
                        printf("\nConfirma novo numero?\n(0) Sim (1) Nao\n");
                        scanf("%d", &confirma);
                            while(confirma < 0 || confirma > 1){
                                printf("\nOpcao invalida\n");
                                scanf("%d", &confirma);
                            }
                        while(confirma == 1){
                            getchar();
                            printf("\nQual o novo telefone?\n");
                            scanf("%d",&telefone);
                            for(k=0;k<10;k++){
                                while(cliente[k].telefone == telefone){
                                    printf("\nJa existe um cadastro com esse telefone\n");
                                    getchar();
                                    printf("\nQual o novo telefone?\n");
                                    scanf("%d", &telefone);
                                    if(cliente[k].telefone != telefone){
                                        k = 0;
                                        break;
                                    }
                                }
                                if(k == 9 && cliente[k].telefone != telefone){
                                    break;
                                }
                            }
                            getchar();
                            printf("\nConfirma novo numero?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma < 0 || confirma > 1){
                                printf("\nOpcao invalida\n");
                                scanf("%d", &confirma);
                            }
                        }
                        cliente[i].telefone = telefone;
                        printf("\nTelefone alterado com sucesso\n");
                        break;
                    case 3:
                        getchar();
                        printf("\nQual o novo endereco?\n");
                        scanf("%[^\n]", end_rua);
                        getchar();
                        printf("\nConfirma novo endereco?\n(0) Sim (1) Nao\n");
                        scanf("%d", &confirma);
                            while(confirma < 0 || confirma > 1){
                                printf("\nOpcao invalida\n");
                                scanf("%d", &confirma);
                            }
                        while(confirma == 1){
                            getchar();
                            printf("\nQual o novo endereco?\n");
                            scanf("%[^\n]", end_rua);
                            getchar();
                            printf("\nConfirma novo endereco?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma < 0 || confirma > 1){
                                printf("\nOpcao invalida\n");
                                scanf("%d", &confirma);
                            }
                        }
                        for(k=0;end_rua[k] != '\0';k++){
                            end_rua[k] = toupper(end_rua[k]);
                        }
                        strcpy(cliente[i].end_rua,end_rua);
                        printf("\nEndereco - rua, alterado com sucesso\n");
                        break;
                        case 4:
                            getchar();
                            printf("\nQual o novo numero/bloco e ap?\n");
                            scanf("%[^\n]", end_num);
                            getchar();
                            printf("\nConfirma novo numero/bloco e ap?\n(0) Sim (1) Nao\n");
                            scanf("%d",&confirma);
                            while(confirma < 0 || confirma > 1){
                                printf("\nOpcao invalida\n");
                                scanf("%d", &confirma);
                            }
                            while(confirma == 1){
                                getchar();
                                printf("\nQual o novo numero/bloco e ap?\n");
                                scanf("%[^\n]", end_num);
                                getchar();
                                printf("\nConfirma novo numero/bloco e ap?\n(0) Sim (1) Nao\n");
                                scanf("%d", &confirma);
                                while(confirma < 0 || confirma > 1){
                                    getchar();
                                    printf("\nOpcao invalida\n");
                                    scanf("%d", &confirma);
                                }
                            }
                            for(k=0;end_num != '\0';k++){
                                end_num[k] = toupper(end_num[k]);
                            }
                            strcpy(cliente[i].end_num,end_num);
                            printf("\nEndereco - numero/bloco e ap foi alterado com sucesso\n");
                            break;
                        case 5:
                            getchar();
                            printf("\nQual o novo bairro?\n");
                            scanf("%[^\n]",end_bairro);
                            getchar();
                            printf("\nConfirma novo bairro?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma <0 || confirma < 1){
                                getchar();
                                printf("\nOpcao invalida\n");
                                scanf("%d", &confirma);
                            }
                            while(confirma == 1){
                                getchar();
                                printf("\nQual o novo bairro?\n");
                                scanf("%[^\n]",end_bairro);
                                getchar();
                                printf("\nConfirma novo bairro?\n(0) Sim (1) Nao\n");
                                scanf("%d", &confirma);
                                while(confirma < 0 || confirma > 1){
                                    getchar();
                                    printf("\nOpcao invalida\n");
                                    scanf("%d", &confirma);
                                }
                            }
                            for(k=0;end_bairro[k] != '\0';k++){
                                end_bairro[k] = toupper(end_bairro[k]);
                            }
                            strcpy(cliente[i].end_bairro,end_bairro);
                            printf("\nEndereco - Bairro, alterado com sucesso\n");
                            break;
                        case 6:
                            getchar();
                            printf("\nQual a nova cidade?\n");
                            scanf("%[^\n]",end_cidade);
                            getchar();
                            printf("\nConfirma nova cidade?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma < 0 || confirma > 1){
                                printf("\nOpcao invalida\n");
                                scanf("%d", &confirma);
                            }
                            while(confirma == 1){
                                getchar();
                                printf("\nQual a nova cidade?\n");
                                scanf("%[^\n]",end_cidade);
                                getchar();
                                printf("\nConfirma nova cidade?\n(0) Sim (1) Nao\n");
                                scanf("%d", &confirma);
                                while(confirma < 0 || confirma > 1){
                                    printf("\nOpcao invalida\n");
                                    scanf("%d",&confirma);
                                }
                            }
                            for(k=0;end_cidade[k] != '\0';k++){
                                end_cidade[k] = toupper(end_cidade[k]);
                            }
                            strcpy(cliente[i].end_cidade,end_cidade);
                            printf("\nEndereco - Cidade, alterado com sucesso\n");
                            break;
                        case 7:
                            return 2;
                            //alteracliente(cliente);
                        case 0:
                            return 1;
                            //usuario(cliente);
                        default:
                            printf("\nOpcao invalida\n");
                    }
                }
            }
            else if(i == 9 && cliente[i].telefone != telefone){
                printf("\nNao existe um cadastro com esse telefone\n");
                return 2;
                //alteracliente(cliente);
            }
        }
    }
    if(procura == 2){//procura por nome
        getchar();
        printf("\nDigite o nome cadastrado\n");
        scanf("%[^\n]",nome);
        for(k=0;nome[k] != '\0';k++){
            nome[k] = toupper(nome[k]);
        }
        for(i=0;i<10;i++){;
            verifica = strcmp(nome,cliente[i].nome_cliente);
            if(verifica == 0){
                while(menu1 != 0){
                    printf("\nNome: %s\nTelefone: %d\nEndereco: %s\nNumero/Bloco e AP: %s\nBairro: %s\nCidade: %s\n",cliente[i].nome_cliente,cliente[i].telefone,cliente[i].end_rua,cliente[i].end_num,cliente[i].end_bairro,cliente[i].end_cidade);
                    printf("\nQual dado deseja alterar?\n(1) Nome (2) Telefone (3) Endereco (4) Numero/Bloco e AP (5) Bairro (6) Cidade (7) Alterar outro cadastro (0) Voltar\n");
                    scanf("%d",&menu1);
                    switch(menu1){
                        case 1:
                            getchar();
                            printf("\nQual o novo nome?\n");
                            scanf("%[^\n]", nome);
                            getchar();
                            printf("\nConfirma novo nome?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma < 0 || confirma > 1){
                                printf("\nOpcao invalida\n");
                                scanf("%d", &confirma);
                            }
                            while(confirma == 1){
                                getchar();
                                printf("\nQual o novo nome?\n");
                                scanf("%[^\n]",nome);
                                for(k=0;nome[k] != '\0';k++){
                                    nome[k] = toupper(nome[k]);
                                }
                                getchar();
                                printf("\nConfirma novo nome?\n(0) Sim (1) Nao\n");
                                scanf("%d", &confirma);
                                while(confirma < 0 || confirma > 1){
                                    printf("\nOpcao invalida\n");
                                    scanf("%d", &confirma);
                                }
                            }
                            for(k=0;nome[k] != '\0';k++){
                                nome[k] = toupper(nome[k]);
                            }
                            strcpy(cliente[i].nome_cliente,nome);
                            printf("\nNome alterado com sucesso\n");
                            break;
                        case 2:
                            getchar();
                            printf("\nQual o novo telefone?\n");
                            scanf("%d", &telefone);
                            for(k=0;k<10;k++){
                                while(cliente[k].telefone == telefone){
                                    printf("\nJa existe um cadastro com esse telefone\n");
                                    getchar();
                                    printf("\nQual o novo telefone?\n");
                                    scanf("%d", &telefone);
                                    if(cliente[k].telefone != telefone){
                                        k = 0;
                                        break;
                                    }
                                }
                                if(k == 9 && cliente[k].telefone != telefone){
                                    break;
                                }
                            }
                            getchar();
                            printf("\nConfirma novo numero?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma < 0 || confirma > 1){
                                printf("\nOpcao invalida\n");
                                scanf("%d", &confirma);
                            }
                            while(confirma == 1){
                                getchar();
                                printf("\nQual o novo telefone?\n");
                                scanf("%d",&telefone);
                                for(k=0;k<10;k++){
                                    while(cliente[k].telefone == telefone){
                                        printf("\nJa existe um cadastro com esse telefone\n");
                                        getchar();
                                        printf("\nQual o novo telefone?\n");
                                        scanf("%d", &telefone);
                                        if(cliente[k].telefone != telefone){
                                            k = 0;
                                            break;
                                        }
                                    }
                                    if(k == 9 && cliente[k].telefone != telefone){
                                        break;
                                    }
                                }
                                getchar();
                                printf("\nConfirma novo numero?\n(0) Sim (1) Nao\n");
                                scanf("%d", &confirma);
                                while(confirma < 0 || confirma > 1){
                                    printf("\nOpcao invalida\n");
                                    scanf("%d", &confirma);
                                }
                            }
                            cliente[i].telefone = telefone;
                            printf("\nTelefone alterado com sucesso\n");
                            break;
                        case 3:
                            getchar();
                            printf("\nQual o novo endereco?\n");
                            scanf("%[^\n]", end_rua);
                            getchar();
                            printf("\nConfirma novo endereco?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma < 0 || confirma > 1){
                                printf("\nOpcao invalida\n");
                                scanf("%d", &confirma);
                            }
                            while(confirma == 1){
                                getchar();
                                printf("\nQual o novo endereco?\n");
                                scanf("%[^\n]", end_rua);
                                getchar();
                                printf("\nConfirma novo endereco?\n(0) Sim (1) Nao\n");
                                scanf("%d", &confirma);
                                while(confirma < 0 || confirma > 1){
                                    printf("\nOpcao invalida\n");
                                    scanf("%d", &confirma);
                                }
                            }
                            for(k=0;end_rua[k] != '\0';k++){
                                end_rua[k] = toupper(end_rua[k]);
                            }
                            strcpy(cliente[i].end_rua,end_rua);
                            printf("\nEndereco - rua, alterado com sucesso\n");
                            break;
                        case 4:
                            getchar();
                            printf("\nQual o novo numero/bloco e ap?\n");
                            scanf("%[^\n]", end_num);
                            getchar();
                            printf("\nConfirma novo numero/bloco e ap?\n(0) Sim (1) Nao\n");
                            scanf("%d",&confirma);
                            while(confirma < 0 || confirma > 1){
                                printf("\nOpcao invalida\n");
                                scanf("%d", &confirma);
                            }
                            while(confirma == 1){
                                getchar();
                                printf("\nQual o novo numero/bloco e ap?\n");
                                scanf("%[^\n]", end_num);
                                getchar();
                                printf("\nConfirma novo numero/bloco e ap?\n(0) Sim (1) Nao\n");
                                scanf("%d", &confirma);
                                while(confirma < 0 || confirma > 1){
                                    getchar();
                                    printf("\nOpcao invalida\n");
                                    scanf("%d", &confirma);
                                }
                            }
                            for(k=0;end_num != '\0';k++){
                                end_num[k] = toupper(end_num[k]);
                            }
                            strcpy(cliente[i].end_num,end_num);
                            printf("\nEndereco - numero/bloco e ap foi alterado com sucesso\n");
                            break;
                        case 5:
                            getchar();
                            printf("\nQual o novo bairro?\n");
                            scanf("%[^\n]",end_bairro);
                            getchar();
                            printf("\nConfirma novo bairro?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma <0 || confirma < 1){
                                getchar();
                                printf("\nOpcao invalida\n");
                                scanf("%d", &confirma);
                            }
                            while(confirma == 1){
                                getchar();
                                printf("\nQual o novo bairro?\n");
                                scanf("%[^\n]",end_bairro);
                                getchar();
                                printf("\nConfirma novo bairro?\n(0) Sim (1) Nao\n");
                                scanf("%d", &confirma);
                                while(confirma < 0 || confirma > 1){
                                    getchar();
                                    printf("\nOpcao invalida\n");
                                    scanf("%d", &confirma);
                                }
                            }
                            for(k=0;end_bairro[k] != '\0';k++){
                                end_bairro[k] = toupper(end_bairro[k]);
                            }
                            strcpy(cliente[i].end_bairro,end_bairro);
                            printf("\nEndereco - Bairro, alterado com sucesso\n");
                            break;
                        case 6:
                            getchar();
                            printf("\nQual a nova cidade?\n");
                            scanf("%[^\n]",end_cidade);
                            getchar();
                            printf("\nConfirma nova cidade?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma < 0 || confirma > 1){
                                printf("\nOpcao invalida\n");
                                scanf("%d", &confirma);
                            }
                            while(confirma == 1){
                                getchar();
                                printf("\nQual a nova cidade?\n");
                                scanf("%[^\n]",end_cidade);
                                getchar();
                                printf("\nConfirma nova cidade?\n(0) Sim (1) Nao\n");
                                scanf("%d", &confirma);
                                while(confirma < 0 || confirma > 1){
                                    printf("\nOpcao invalida\n");
                                    scanf("%d",&confirma);
                                }
                            }
                            for(k=0;end_cidade[k] != '\0';k++){
                                end_cidade[k] = toupper(end_cidade[k]);
                            }
                            strcpy(cliente[i].end_cidade,end_cidade);
                            printf("\nEndereco - Cidade, alterado com sucesso\n");
                            break;
                        case 7:
                            return 2;
                            //alteracliente(cliente);
                        case 0:
                            return 1;
                            //usuario(cliente);
                        default:
                            printf("\nOpcao invalida\n");
                    }
                }
            }
            if(i == 9 && verifica != 0){
                printf("\nNao existe um cadastro com esse nome\n");
                return 2;
                //alteracliente(cliente);
            }
        }
    }
    if(procura == 0){
        return 1;
        //usuario(cliente);
    }
}

int removercliente(cadastro cliente[10]){
    int procura,telefone,i,verifica,confirma;
    char nome[30];
    printf("\nQual cliente deseja remover?\n(1) Procura por telefone (2) Procura por nome (0) Voltar\n");
    scanf("%d", &procura);
    while(procura < 0 || procura > 2){
        getchar();
        printf("\nOpcao invalida\n");
        scanf("%d", &procura);
    }
    if(procura == 1){
        getchar();
        printf("\nQual o telefone de cadastro?\n");
        scanf("%d", &telefone);
        for(i=0;i<10;i++){
            if(cliente[i].telefone == telefone){
                getchar();
                printf("\nNome: %s\nTelefone: %d\nEndereco: %s\nNumero/Bloco e AP: %s\nBairro: %s\nCidade: %s\n",cliente[i].nome_cliente,cliente[i].telefone,cliente[i].end_rua,cliente[i].end_num,cliente[i].end_bairro,cliente[i].end_cidade);
                printf("\nDeseja remover esse cadastro?\n(0) Sim (1) Nao\n");
                scanf("%d", &confirma);
                while(confirma < 0 || confirma > 1){
                    getchar();
                    printf("\nOpcao invalida\n");
                    scanf("%d",&confirma);
                }
                if(confirma == 0){
                    strcpy(cliente[i].nome_cliente,"0");
                    strcpy(cliente[i].end_rua,"0");
                    strcpy(cliente[i].end_num,"0");
                    strcpy(cliente[i].end_bairro,"0");
                    strcpy(cliente[i].end_cidade,"0");
                    cliente[i].telefone = -1;
                    getchar();
                    printf("\nCadastro removido com sucesso\nO que deseja?\n(0) Remover outro cadastro (1) Sair\n");
                    scanf("%d", &confirma);
                    while(confirma < 0 || confirma > 1){
                        getchar();
                        printf("\nOpcao invalida\n");
                        scanf("%d",&confirma);
                    }
                    if(confirma == 0){
                        return 2;
                        //removercliente(cliente);
                    }
                    if(confirma == 1){
                        return 1;
                        //usuario(cliente);
                    }
                }
            }
            if(i == 9 && cliente[i].telefone != telefone){
                printf("\nNao existe um cadastro com esse telefone\n");
                return 2;
                //removercliente(cliente);
            }
        }
    }
    if(procura == 2){
        getchar();
        printf("\nQual o nome de cadastro?\n");
        scanf("%[^\n]", nome);
        for(i=0;nome[i] != '\0';i++){
            nome[i] = toupper(nome[i]);
        }
        for(i=0;i<10;i++){
            verifica = strcmp(cliente[i].nome_cliente,nome);
            if(verifica == 0){
                getchar();
                printf("\nNome: %s\nTelefone: %d\nEndereco: %s\nNumero/Bloco e AP: %s\nBairro: %s\nCidade: %s\n",cliente[i].nome_cliente,cliente[i].telefone,cliente[i].end_rua,cliente[i].end_num,cliente[i].end_bairro,cliente[i].end_cidade);
                printf("\nDeseja remover esse cadastro?\n(0) Sim (1) Nao\n");
                scanf("%d", &confirma);
                while(confirma < 0 || confirma > 1){
                    getchar();
                    printf("\nOpcao invalida\n");
                    scanf("%d",&confirma);
                }
                if(confirma == 0){
                    strcpy(cliente[i].nome_cliente,"0");
                    strcpy(cliente[i].end_rua,"0");
                    strcpy(cliente[i].end_num,"0");
                    strcpy(cliente[i].end_bairro,"0");
                    strcpy(cliente[i].end_cidade,"0");
                    cliente[i].telefone = -1;
                    getchar();
                    printf("\nCadastro removido com sucesso\nO que deseja?\n(0) Remover outro cadastro (1) Sair\n");
                    scanf("%d", &confirma);
                    while(confirma < 0 || confirma > 1){
                        getchar();
                        printf("\nOpcao invalida\n");
                        scanf("%d",&confirma);
                    }
                    if(confirma == 0){
                        return 2;
                        //removercliente(cliente);
                    }
                    if(confirma == 1){
                        return 1;
                        //usuario(cliente);
                    }
                }
            }
            if(i == 9 && verifica != 0){
                printf("\nNao existe um cadastro com esse telefone\n");
                return 2;
                //removercliente(cliente);
            }
        }
    }
    if(procura == 0){
        return 1;
        //usuario(cliente);
    }
}

int cadastrarpizza(cadastro pizza[10]){
    int adiciona=0, k, codigo, verifica, posicao = -1, i;
    float valor;
    char nomepizza[20], descricao[100];
    while(posicao < 10 || adiciona != 1){
        posicao = -1;
        for(k=0;k<10;k++){
            if(pizza[k].cod_pizza == -1){//lendo apenas posicao que nao tem valor atribuido
                posicao = k;
                break;
            }
        }
        if(posicao == -1){ // se nao encontrar posicao vazia, retorna cheio
            printf("\nCadastro ja esta cheio\n");
            return 1;
            //pizzaria(pizza);
        }
        printf("\nCodigo da pizza para cadastro?\n");
        scanf("%d", &codigo);
        while(codigo < 0){
            printf("\nPor favor digite um codigo >= 0\n"); // verifica posicao invalida
            scanf("%d", &codigo);
        }
        for(k=0;k<10;k++){
                if (codigo == pizza[k].cod_pizza) {//verifica se ja existe esse codigo
                    printf("\nJa existe um cadastro com este codigo\n");
                    return 2;
                    //cadastrarpizza(pizza);
                }
        }
        getchar();
        printf("\nQual o nome da pizza para cadastro?\n");
        scanf("%[^\n]", nomepizza);
        for(k=0;nomepizza[k] != '\0';k++){ // deixando nome da pizza maiusculo
            nomepizza[k] = toupper(nomepizza[k]);
        }
        for(k=0;k<10;k++){
            verifica = strcmp(nomepizza,pizza[k].nome_pizza);//verifica se ja existe uma pizza com esse nome
            while(verifica == 0){
                getchar();
                printf("\nJa existe um cadastro com esse nome\nDigite outro:\n");
                scanf("%[^\n]", nomepizza);
                for(i=0;nomepizza[i] != '\0';i++){//deixando nome da pizza maiusculo
                    nomepizza[i] = toupper(nomepizza[i]);
                }
                verifica = strcmp(nomepizza,pizza[k].nome_pizza);
            }
        }
        getchar();
        printf("\nQual a descricao da pizza para cadastro?\n");
        scanf("%[^\n]",descricao);
        for(k=0;descricao[k] != '\0';k++){
            descricao[k] = toupper(descricao[k]);
        }
        getchar();
        printf("\nQual o valor para cadastro?\n");
        scanf("%f",&valor);
        //se tudo deu certo, atribuo os valores na estrutura
        pizza[posicao].cod_pizza = codigo;
        strcpy(pizza[posicao].nome_pizza,nomepizza);
        strcpy(pizza[posicao].descricao,descricao);
        pizza[posicao].valor = valor;
        printf("\nCadastro do Codigo: [ %d ] | Pizza [ %s ] | Valor R$ [ %.2f ]\nDescricao: [ %s ]\nRealizado com sucesso!\n", pizza[posicao].cod_pizza,pizza[posicao].nome_pizza,pizza[posicao].valor,pizza[posicao].descricao);
        printf("\nDeseja cadastrar mais pizzas?\n(0) Sim  (1) Nao\n");
        scanf("%d", &adiciona);
        while(adiciona < 0 || adiciona >1){
            printf("\nOpcao invalida\n");
            scanf("%d", &adiciona);
        }
        if(adiciona == 1){
            return 1;
            //pizzaria(pizza);
        }
        posicao++;
        if(posicao == 10){
            printf("\nCadastro de 10 pizzas completado com sucesso!\n");
            break;
        }
    }
    return 1;
    //pizzaria(pizza);
}

int alterapizza(cadastro pizza[10]){
    int procura, codigo, i, k, j, altera=-1, confirma, verifica;
    float valor;
    char nome[20], descricao[100];
    printf("\nQual pizza deseja alterar?\n(1) Procura por Codigo | (2) Procura por Nome (0) Voltar\n");
    scanf("%d", &procura);
    while(procura < 0 || procura > 2){
        printf("\nOpcao invalida\n");
        scanf("%d", &procura);
    }
    if(procura == 1){
        printf("\nDigite o codigo de cadastro\n");
        scanf("%d", &codigo);
        while(codigo < 0){
            printf("\nPor favor digite um codigo >= 0\n");
            scanf("%d", &codigo);
        }
        for(i=0;i<10;i++){
            if(pizza[i].cod_pizza == codigo){
                while(altera != 0){
                    printf("\nCodigo: [ %d ] | Pizza: [ %s ] | Valor R$: [ %.2f ]\nDescricao: [ %s ]\n",pizza[i].cod_pizza, pizza[i].nome_pizza,pizza[i].valor,pizza[i].descricao);
                    printf("\nO que deseja alterar?\n(1) Nome (2) Descricao (3) Valor (4) Alterar outra Pizza (0) Voltar\n");
                    scanf("%d",&altera);
                    while(altera < 0 || altera > 4){
                        printf("\nOpcao invalida\n");
                        scanf("%d", &altera);
                    }
                    switch(altera){
                        case 1:
                            getchar();
                            printf("\nQual o novo nome?\n");
                            scanf("%[^\n]", nome);
                            for(k=0;nome[k] != '\0';k++){
                                nome[k] = toupper(nome[k]);
                            }
                            for(k=0;k<10;k++){
                                verifica = strcmp(pizza[k].nome_pizza,nome);
                                while(verifica == 0){
                                    printf("\nJa existe um cadastro com esse nome\n");
                                    getchar();
                                    printf("\nQual o novo nome?\n");
                                    scanf("%[^\n]", nome);
                                    for(j=0;nome[j] != '\0';j++){
                                        nome[j] = toupper(nome[j]);
                                    }
                                    verifica = strcmp(pizza[k].nome_pizza,nome);
                                    if(verifica != 0){
                                        k = 0;
                                        break;
                                    }
                                }
                                if(k == 9 && verifica != 0){
                                    break;
                                }
                            }
                            getchar();
                            printf("\nConfirma novo nome?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma == 1){
                                getchar();
                                printf("\nQual o novo nome?\n");
                                scanf("%[^\n]", nome);
                                for(k=0;nome[k] != '\0';k++){
                                    nome[k] = toupper(nome[k]);
                                }
                                for(k=0;k<10;k++){
                                    verifica = strcmp(pizza[k].nome_pizza,nome);
                                    while(verifica == 0){
                                        printf("\nJa existe um cadastro com esse nome\n");
                                        getchar();
                                        printf("\nQual o novo nome?\n");
                                        scanf("%[^\n]", nome);
                                        for(j=0;nome[j] != '\0';j++){
                                            nome[j] = toupper(nome[j]);
                                        }
                                        verifica = strcmp(pizza[k].nome_pizza,nome);
                                        if(verifica != 0){
                                            k = 0;
                                            break;
                                        }
                                    }
                                    if(k == 9 && verifica != 0){
                                        break;
                                    }
                                }
                                getchar();
                                printf("\nConfirma novo nome?\n(0) Sim (1) Nao\n");
                                scanf("%d", &confirma);
                            }
                            strcpy(pizza[i].nome_pizza,nome);
                            printf("\nNome alterado com sucesso!\n");
                            break;
                        case 2:
                            getchar();
                            printf("\nQual a nova descricao?\n");
                            scanf("%[^\n]",descricao);
                            getchar();
                            printf("Confirma nova descricao?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma == 1){
                                getchar();
                                printf("\nQual a nova descricao?\n");
                                scanf("%[^\n]", descricao);
                                getchar();
                                printf("Confirma nova descricao?\n(0) Sim (1) Nao\n");
                                scanf("%d", &confirma);
                            }
                            strcpy(pizza[i].descricao,descricao);
                            printf("\nDescricao alterada com sucesso!\n");
                            break;
                        case 3:
                            getchar();
                            printf("\nQual o novo valor?\n");
                            scanf("%f", &valor);
                            getchar();
                            printf("\nConfirma novo valor?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma == 1){
                                getchar();
                                printf("\nQual o novo valor?\n");
                                scanf("%f", &valor);
                                getchar();
                                printf("\nConfirma novo valor?\n(0) Sim (1) Nao\n");
                                scanf("%d", &confirma);
                            }
                            pizza[i].valor = valor;
                            printf("\nValor alterado com sucesso!\n");
                            break;
                        case 4:
                            return 2;
                            //alterapizza(pizza);
                            break;
                        case 0:
                            return 1;
                            //pizzaria(pizza);
                        default:
                            printf("\nOpcao invalida\n");
                    }
                }
            }
            else if(i == 9 && pizza[i].cod_pizza != codigo){
                printf("\nNao existe um produto com esse codigo\n");
                return 2;
                //alterapizza(pizza);
            }
        }
    }
    getchar();
    if(procura == 2){//caso escolha procurar pelo nome
        printf("\nDigite o nome de cadastro\n");
        scanf("%[^\n]",nome);
        for(k=0;nome[k] != '\0';k++){//transformando nome em maiusculo
            nome[k] = toupper(nome[k]);
        }
        altera = -1;
        for(i=0;i<10;i++){
            verifica = strcmp(nome,pizza[i].nome_pizza);
            if(verifica == 0){
                while(altera != 0){
                    printf("\nCodigo: [ %d ] | Pizza: [ %s ] | Valor R$: [ %.2f ]\nDescricao: [ %s ]\n",pizza[i].cod_pizza, pizza[i].nome_pizza,pizza[i].valor,pizza[i].descricao);
                    printf("\nO que deseja alterar?\n(1) Nome (2) Descricao (3) Valor (4) Alterar outra Pizza (0) Voltar\n");
                    scanf("%d",&altera);
                    while(altera < 0 || altera > 4){
                        printf("\nOpcao invalida\n");
                        scanf("%d", &altera);
                    }
                    switch(altera){
                        case 1:
                            getchar();
                            printf("\nQual o novo nome?\n");
                            scanf("%[^\n]", nome);
                            for(k=0;nome[k] != '\0';k++){
                                nome[k] = toupper(nome[k]);
                            }
                            for(k=0;k<10;k++){
                                verifica = strcmp(pizza[k].nome_pizza,nome);
                                while(verifica == 0){
                                    printf("\nJa existe um cadastro com esse nome\n");
                                    getchar();
                                    printf("\nQual o novo nome?\n");
                                    scanf("%[^\n]", nome);
                                    for(j=0;nome[j] != '\0';j++){
                                        nome[j] = toupper(nome[j]);
                                    }
                                    verifica = strcmp(pizza[k].nome_pizza,nome);
                                    if(verifica != 0){
                                        k = 0;
                                        break;
                                    }
                                }
                                if(k == 9 && verifica != 0){
                                    break;
                                }
                            }
                            getchar();
                            printf("\nConfirma novo nome?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma == 1){
                                getchar();
                                printf("\nQual o novo nome?\n");
                                scanf("%[^\n]", nome);
                                for(k=0;nome[k] != '\0';k++){
                                    nome[k] = toupper(nome[k]);
                                }
                                for(k=0;k<10;k++){
                                    verifica = strcmp(pizza[k].nome_pizza,nome);
                                    while(verifica == 0){
                                        printf("\nJa existe um cadastro com esse nome\n");
                                        getchar();
                                        printf("\nQual o novo nome?\n");
                                        scanf("%[^\n]", nome);
                                        for(j=0;nome[j] != '\0';j++){
                                            nome[j] = toupper(nome[j]);
                                        }
                                        verifica = strcmp(pizza[k].nome_pizza,nome);
                                        if(verifica != 0){
                                            k = 0;
                                            break;
                                        }
                                    }
                                    if(k == 9 && verifica != 0){
                                        break;
                                    }
                                }
                                getchar();
                                printf("\nConfirma novo nome?\n(0) Sim (1) Nao\n");
                                scanf("%d", &confirma);
                            }
                            strcpy(pizza[i].nome_pizza,nome);
                            printf("\nNome alterado com sucesso!\n");
                            break;
                        case 2:
                            getchar();
                            printf("\nQual a nova descricao?\n");
                            scanf("%[^\n]",descricao);
                            getchar();
                            printf("Confirma nova descricao?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma == 1){
                                getchar();
                                printf("\nQual a nova descricao?\n");
                                scanf("%[^\n]", descricao);
                                getchar();
                                printf("Confirma nova descricao?\n(0) Sim (1) Nao\n");
                                scanf("%d", &confirma);
                            }
                            strcpy(pizza[i].descricao,descricao);
                            printf("\nDescricao alterada com sucesso!\n");
                            break;
                        case 3:
                            getchar();
                            printf("\nQual o novo valor?\n");
                            scanf("%f", &valor);
                            getchar();
                            printf("\nConfirma novo valor?\n(0) Sim (1) Nao\n");
                            scanf("%d", &confirma);
                            while(confirma == 1){
                                getchar();
                                printf("\nQual o novo valor?\n");
                                scanf("%f", &valor);
                                getchar();
                                printf("\nConfirma novo valor?\n(0) Sim (1) Nao\n");
                                scanf("%d", &confirma);
                            }
                            pizza[i].valor = valor;
                            printf("\nValor alterado com sucesso!\n");
                            break;
                        case 4:
                            return 2;
                            //alterapizza(pizza);
                            break;
                        case 0:
                            return 1;
                            //pizzaria(pizza);
                        default:
                            printf("\nOpcao invalida\n");
                    }
                }
            }
            else if(i == 9 && verifica != 0){
                printf("\nNao existe um produto com esse nome\n");
                return 2;
                //alterapizza(pizza);
            }
        }
    }
    else if(procura == 0){
        return 1;
        //pizzaria(pizza);
    }
}

int removerpizza(cadastro pizza[10]){
    int procura, i, k, codigo, confirma, verifica;
    char nome[20];
    printf("\nQual pizza deseja remover?\n(1) Procurar pelo codigo (2) Procurar pelo nome (0) Voltar\n");
    scanf("%d",&procura);
    while(procura < 0 || procura > 2){
        printf("\nOpcao invalida\n");
        scanf("%d",&procura);
    }
    if(procura == 1){// procura pelo codigo
        printf("\nDigite o codigo de cadastro\n");
        scanf("%d", &codigo);
        while(codigo < 0){
            printf("\nPor favor digite um codigo >= 0\n");
            scanf("%d", &codigo);
        }
        for(i=0;i<10;i++){
            if(pizza[i].cod_pizza == codigo){
                printf("\nCodigo: [ %d ] | Pizza: [ %s ] | Valor R$: [ %.2f ]\nDescricao: [ %s ]\n",pizza[i].cod_pizza, pizza[i].nome_pizza,pizza[i].valor,pizza[i].descricao);
                printf("\nDeseja remover este produto?\n(0) Sim (1) Nao\n");
                scanf("%d", &confirma);
                while(confirma < 0 || confirma > 1){
                    printf("\nOpcao invalida\n");
                    scanf("%d", &confirma);
                }
                if(confirma == 0){//se for remover
                    strcpy(pizza[i].nome_pizza,"0");
                    pizza[i].cod_pizza = -1;
                    strcpy(pizza[i].descricao,"0");
                    pizza[i].valor = -1;
                    printf("\nProduto removido com sucesso!\n\n(0) Remover outro produto (1) Sair\n");
                    scanf("%d", &confirma);
                    while(confirma <0 || confirma > 1){
                        printf("\nOpcao invalida\n");
                        scanf("%d", &confirma);
                    }
                    if(confirma == 0){
                        return 2;
                        //removerpizza(pizza);
                    }
                    else if(confirma == 1){
                        return 1;
                        //pizzaria(pizza);
                    }
                }
                getchar();
                if(confirma == 1){//se nao for
                    printf("\nO que deseja?\n(0) Remover outro produto (1) Sair\n");
                    scanf("%d", &confirma);
                    while(confirma < 0 || confirma > 1){
                        printf("\nOpcao invalida\n");
                        scanf("%d", &confirma);
                    }
                    if(confirma == 0){
                        return 2;
                        //removerpizza(pizza);
                    }
                    else if(confirma == 1){
                        return 1;
                        //pizzaria(pizza);
                    }
                }
            }
            getchar();
            if(i==9 && pizza[i].cod_pizza != codigo){
                printf("\nNao existe um produto com esse codigo\n");
                return 2;
                //removerpizza(pizza);
            }
        }
    }
    getchar();
    if(procura == 2){//procura pelo nome
        printf("\nDigite o nome de cadastro\n");
        scanf("%[^\n]",nome);
        for(k=0;nome[k] != '\0';k++){//transformando nome em maiusculo
            nome[k] = toupper(nome[k]);
        }
        for(i=0;i<10;i++){
            verifica = strcmp(nome,pizza[i].nome_pizza);
            if(verifica == 0){
                printf("\nCodigo: [ %d ] | Pizza: [ %s ] | Valor R$: [ %.2f ]\nDescricao: [ %s ]\n",pizza[i].cod_pizza, pizza[i].nome_pizza,pizza[i].valor,pizza[i].descricao);
                printf("\nDeseja remover este produto?\n(0) Sim (1) Nao\n");
                scanf("%d", &confirma);
                while(confirma < 0 || confirma > 1){
                    printf("\nOpcao invalida\n");
                    scanf("%d", &confirma);
                }
                if(confirma == 0){
                    strcpy(pizza[i].nome_pizza,"0");
                    pizza[i].cod_pizza = -1;
                    strcpy(pizza[i].descricao,"0");
                    pizza[i].valor = -1;
                    printf("\nProduto removido com sucesso!\n\n(0) Remover outro produto (1) Sair\n");
                    scanf("%d", &confirma);
                    while(confirma < 0 || confirma > 1){
                        printf("\nOpcao invalida\n");
                        scanf("%d", &confirma);
                    }
                    if(confirma == 0){
                        return 2;
                        //removerpizza(pizza);
                    }
                    if(confirma == 1){
                        return 1;
                        //pizzaria(pizza);
                    }
                }
                getchar();
                if(confirma == 1){//se nao remover
                    printf("\nO que deseja?\n(0) Remover outra Pizza (1) Sair\n");
                    scanf("%d", &confirma);
                    while(confirma < 0 || confirma > 1){
                        printf("\nOpcao invalida\n");
                        scanf("%d", &confirma);
                    }
                    if(confirma == 0){
                        return 2;
                        //removerpizza(pizza);
                    }
                    else if(confirma == 1){
                        return 1;
                        //pizzaria(pizza);
                    }
                }
            }
            getchar();
            if(i == 9 && verifica != 0){
                printf("\nNao existe um cadastro com esse nome\n");
                return 2;
                //removerpizza(pizza);
            }
        }
    }
    else if(procura == 0){//volta pro menu pizzaria
        return 1;
        //pizzaria(pizza);
    }
}

int menu_pizza(cadastro pizza[10]){
    int i, k, anterior, confirma, verifica=-1;
    float valoranterior;
    char nomeanterior[20], descricaoanterior[100];
    for(i=0;i<10;i++){ // ordenando as pizzas - Bubble Sort
        for(k=0;k<10-1;k++){
            if(pizza[k].cod_pizza > pizza[k+1].cod_pizza && pizza[k+1].cod_pizza != -1){
                //trocando a ordem dos codigos
                anterior = pizza[k].cod_pizza;
                pizza[k].cod_pizza = pizza[k+1].cod_pizza;
                pizza[k+1].cod_pizza = anterior;
                //trocando a ordem dos nomes
                strcpy(nomeanterior,pizza[k].nome_pizza);
                strcpy(pizza[k].nome_pizza,pizza[k+1].nome_pizza);
                strcpy(pizza[k+1].nome_pizza,nomeanterior);
                //trocando a ordem da descricao
                strcpy(descricaoanterior,pizza[k].descricao);
                strcpy(pizza[k].descricao,pizza[k+1].descricao);
                strcpy(pizza[k+1].descricao,descricaoanterior);
                //trocando a ordem dos valores
                valoranterior = pizza[k].valor;
                pizza[k].valor = pizza[k+1].valor;
                pizza[k+1].valor = valoranterior;
            }
        }
    }
    printf("\n| Menu de Pizzas |\n");
    for(i=0;i<10;i++){
        if(pizza[i].cod_pizza > -1) {
            verifica = 0;
            printf("\n[ Codigo: %d | Nome: %s | Valor: %.2f\nDescricao: %s ]\n", pizza[i].cod_pizza, pizza[i].nome_pizza,pizza[i].valor, pizza[i].descricao);
        }
        if(i==9 && verifica == -1){
            printf("\nNao ha pizzas cadastradas\n");
            return 1;
            //usuario(cliente);
        }
    }
    printf("\n(0) Voltar\n");
    scanf("%d",&confirma);
    while(confirma != 0){
        printf("\nOpcao invalida\n");
        scanf("%d", &confirma);
    }
    if(confirma == 0){
        return 0;
    }
}

int fazerpedido(cadastro pedido[10],cadastro cliente[10],cadastro pizza[10]){
    int procura, cod_pizza, i, k, qtd_pizza, outrapizza = 0, posicao = -1,verificapizza= -1, verificacliente = -1, telefone, existe = 0, confirma, recebecadastrarcliente, verifica;
    char nome[30];
    printf("\nQual a Pizza?\n(1) Procura por codigo (2) Procura por nome (0) Voltar\n");
    scanf("%d", &procura);
    while(procura < 0 || procura > 2){
        getchar();
        printf("\nOpcao invalida\n");
        scanf("%d", &procura);
    }
    if(procura == 1) {
        for(i = 0; i < 10; i++) {
            if(pedido[i].pedidos == -1){//pegando posicao de pedido vazia
                posicao = i;
                break;
            }
        }
        for(i=0;i<10;i++){// verifico se ha algum codigo de pizza cadastrado
            if(pizza[i].cod_pizza > -1){
                verificapizza = 0;
            }
            if(cliente[i].telefone > -1){
                verificacliente = 0;
            }
        }
        if(verificapizza == -1){
            printf("\nNao ha pizzas cadastradas\n");
            return 1;
            //usuario(cliente,pizza,pedido);
        }
        if(verificacliente == -1){
            printf("\nNao ha clientes cadastrados\n");
            return 1;
            //usuario(cliente,pizza,pedido);
        }
        while(outrapizza == 0) {
            getchar();
            printf("\nDigite o codigo da pizza\n");
            scanf("%d", &cod_pizza);
            for (i = 0; i < 10; i++) {
                if (pizza[i].cod_pizza == cod_pizza) {
                    printf("\nCodigo: [ %d ] | Nome: [ %s ] | Valor R$: [ %.2f ]\nDescricao: [ %s ]\n",pizza[i].cod_pizza, pizza[i].nome_pizza, pizza[i].valor, pizza[i].descricao);
                    getchar();
                    printf("\nQuantidade?\n");
                    scanf("%d", &qtd_pizza);
                    while(qtd_pizza < 1){
                        getchar();
                        printf("\nPor favor digite uma quantidade valida\n");
                        scanf("%d", &qtd_pizza);
                    }
                    pedido[posicao].pedidos = cod_pizza;
                    pedido[posicao].qtd_pizza = qtd_pizza;
                    pedido[posicao].valor = pizza[i].valor;
                    pedido[posicao].valores = qtd_pizza*pizza[i].valor;
                    strcpy(pedido[posicao].nome_pizza,pizza[i].nome_pizza);
                    strcpy(pedido[posicao].descricao,pizza[i].descricao);
                    outrapizza = 1;
                    break;
                }
                else if (i == 9 && pizza[i].cod_pizza != cod_pizza) {
                    printf("\nNao existe um cadastro com esse codigo\n");
                    break;
                }
            }
        }
        getchar();
        printf("\nQual o cliente?\n(1) Procura por telefone (2) Procura por nome\n");
        scanf("%d", &procura);
        while(procura < 0 || procura > 2){
            printf("\nOpcao invalida\n");
            scanf("%d", &procura);
        }
        if(procura == 1){
            while(existe == 0){
                getchar();
                printf("\nQual o telefone?\n");
                scanf("%d", &telefone);
                for(i=0;i<10;i++){
                    if(cliente[i].telefone == telefone){
                        existe = 1;
                        getchar();
                        printf("\nNome: %s\nTelefone: %d\nEndereco: %s\nNumero/Bloco e AP: %s\nBairro: %s\nCidade: %s\n",cliente[i].nome_cliente,cliente[i].telefone,cliente[i].end_rua,cliente[i].end_num,cliente[i].end_bairro,cliente[i].end_cidade);
                        printf("\nConfirma dados do cliente?\n(0) Sim (1) Nao\n");
                        scanf("%d", &confirma);
                        while(confirma < 0 || confirma > 1){
                            getchar();
                            printf("\nOpcao invalida\n");
                            scanf("%d",&confirma);
                        }
                        if(confirma == 0){
                            pedido[posicao].telefone = cliente[i].telefone;
                            strcpy(pedido[posicao].nome_cliente,cliente[i].nome_cliente);
                            strcpy(pedido[posicao].end_rua,cliente[i].end_rua);
                            strcpy(pedido[posicao].end_num,cliente[i].end_num);
                            strcpy(pedido[posicao].end_bairro,cliente[i].end_bairro);
                            strcpy(pedido[posicao].end_cidade,cliente[i].end_cidade);
                            pedido[posicao].situacao = 1;
                            pedido[posicao].avaliacao = 0;
                            pedido[posicao].motoqueiro = 0;
                            printf("\n|O Pedido foi gerado com sucesso|\nInformacoes do pedido:\nCodigo do pedido: %d\n",posicao);
                            printf("\nCodigo pizza: %d | Quantidade: %d | Nome: %s | Valor: %.2f |\nDescricao: %s\n", pedido[posicao].pedidos, pedido[posicao].qtd_pizza, pedido[posicao].nome_pizza, pedido[posicao].valor, pedido[posicao].descricao);
                            printf("\nCliente: %s | Telefone: %d\nEndereco: %s, %s, %s, %s\n",pedido[posicao].nome_cliente, pedido[posicao].telefone,pedido[posicao].end_rua,pedido[posicao].end_num,pedido[posicao].end_bairro,pedido[posicao].end_cidade);
                            printf("Total do pedido: %.2f\nSituacao do pedido - [ em preparacao ]\n", pedido[posicao].valores);
                            return 1;
                            //usuario(cliente);
                        }
                        else if(confirma == 1){
                            existe = 0;
                            break;
                        }
                    }
                    else if(i == 9 && cliente[i].telefone != telefone){
                        printf("\nNao existe um cadastro com esse telefone\n(0) Cadastrar cliente (1) Digitar nome novamente\n");
                        scanf("%d", &confirma);
                        while(confirma != 0){
                            printf("\nOpcao invalida\n");
                            scanf("%d",&confirma);
                        }
                        if(confirma == 1){
                            break;
                        }
                        else {
                            recebecadastrarcliente = cadastrarcliente(cliente);
                            while (recebecadastrarcliente == 2) {
                                recebecadastrarcliente = cadastrarcliente(cliente);
                            }
                        }
                        printf("\nContinue seu pedido...\n");
                        break;
                    }
                }
            }
        }
        else if(procura == 2){
            existe = 0;
            while(existe == 0){
                getchar();
                printf("\nQual o nome do cliente?\n");
                scanf("%[^\n]", nome);
                for(i=0;nome[i] != '\0';i++){
                    nome[i] = toupper(nome[i]);
                }
                for(i=0;i<10;i++){
                    verifica = strcmp(cliente[i].nome_cliente,nome);
                    if(verifica == 0){
                        existe = 1;
                        getchar();
                        printf("\nNome: %s\nTelefone: %d\nEndereco: %s\nNumero/Bloco e AP: %s\nBairro: %s\nCidade: %s\n",cliente[i].nome_cliente,cliente[i].telefone,cliente[i].end_rua,cliente[i].end_num,cliente[i].end_bairro,cliente[i].end_cidade);
                        printf("\nConfirma dados do cliente?\n(0) Sim (1) Nao\n");
                        scanf("%d", &confirma);
                        while(confirma < 0 || confirma > 1){
                            getchar();
                            printf("\nOpcao invalida\n");
                            scanf("%d",&confirma);
                        }
                        if(confirma == 0){
                            pedido[posicao].telefone = cliente[i].telefone;
                            strcpy(pedido[posicao].nome_cliente,cliente[i].nome_cliente);
                            strcpy(pedido[posicao].end_rua,cliente[i].end_rua);
                            strcpy(pedido[posicao].end_num,cliente[i].end_num);
                            strcpy(pedido[posicao].end_bairro,cliente[i].end_bairro);
                            strcpy(pedido[posicao].end_cidade,cliente[i].end_cidade);
                            pedido[posicao].situacao = 1;
                            pedido[posicao].avaliacao = 0;
                            pedido[posicao].motoqueiro = 0;
                            printf("\n|O Pedido foi gerado com sucesso|\nInformacoes do pedido:\nCodigo do pedido: %d\n",posicao);
                            printf("\nCodigo pizza: %d | Quantidade: %d | Nome: %s | Valor: %.2f |\nDescricao: %s\n", pedido[posicao].pedidos, pedido[posicao].qtd_pizza, pedido[posicao].nome_pizza, pedido[posicao].valor, pedido[posicao].descricao);
                            printf("\nCliente: %s | Telefone: %d\nEndereco: %s, %s, %s, %s\n",pedido[posicao].nome_cliente, pedido[posicao].telefone,pedido[posicao].end_rua,pedido[posicao].end_num,pedido[posicao].end_bairro,pedido[posicao].end_cidade);
                            printf("Total do pedido: %.2f\nSituacao do pedido - [ em preparacao ]\n", pedido[posicao].valores);
                            return 1;
                            //usuario(cliente);
                        }
                        else if(confirma == 1){
                            existe = 0;
                            break;
                        }
                    }
                    else if(i == 9 && verifica != 0){
                        getchar();
                        printf("\nNao existe um cadastro com esse nome\n(0) Cadastrar cliente (1) Digitar nome novamente\n");
                        scanf("%d", &confirma);
                        while(confirma < 0 || confirma > 1){
                            getchar();
                            printf("\nOpcao invalida\n");
                            scanf("%d",&confirma);
                        }
                        if(confirma == 1){
                            break;
                        }
                        else {
                            recebecadastrarcliente = cadastrarcliente(cliente);
                            while (recebecadastrarcliente == 2) {
                                recebecadastrarcliente = cadastrarcliente(cliente);
                            }
                        }
                        printf("\nContinue seu pedido...\n");
                        break;
                    }
                }
            }
        }
    }
    else if(procura == 2){//faz procura pelo nome da pizza entao
        for(i = 0; i < 10; i++) {
            if(pedido[i].pedidos == -1){//pegando posicao de pedido vazia
                posicao = i;
                break;
            }
        }
        for(i=0;i<10;i++){// verifico se ha algum codigo de pizza cadastrado
            if(pizza[i].cod_pizza > -1){
                verificapizza = 0;
            }
        }
        if(verificapizza == -1){
            printf("\nNao ha pizzas cadastradas\n");
            return 1;
            //usuario(cliente,pizza,pedido);
        }
        outrapizza = 0;//zerando
        while(outrapizza == 0) {
            getchar();
            printf("\nDigite o nome da pizza\n");
            scanf("%[^\n]", nome);
            for(i=0;nome[i] != '\0';i++){
                nome[i] = toupper(nome[i]);
            }
            for (i = 0; i < 10; i++) {
                verifica = strcmp(pizza[i].nome_pizza,nome);
                if (verifica == 0) {
                    printf("\nCodigo: [ %d ] | Nome: [ %s ] | Valor R$: [ %.2f ]\nDescricao: [ %s ]\n",pizza[i].cod_pizza, pizza[i].nome_pizza, pizza[i].valor, pizza[i].descricao);
                    getchar();
                    printf("\nQuantidade?\n");
                    scanf("%d", &qtd_pizza);
                    while(qtd_pizza < 1){
                        printf("\nPor favor digite uma quantidade valida\n");
                        scanf("%d", &qtd_pizza);
                    }
                    pedido[posicao].pedidos = pizza[i].cod_pizza;
                    pedido[posicao].qtd_pizza = qtd_pizza;
                    pedido[posicao].valor = pizza[i].valor;
                    pedido[posicao].valores = qtd_pizza*pizza[i].valor;
                    strcpy(pedido[posicao].nome_pizza,pizza[i].nome_pizza);
                    strcpy(pedido[posicao].descricao,pizza[i].descricao);
                    outrapizza = 1;
                    break;
                }
                else if (i == 9 && verifica != 0) {
                    printf("\nNao existe um cadastro com esse nome\n");
                    break;
                }
            }
        }
        getchar();
        printf("\nQual o cliente?\n(1) Procura por telefone (2) Procura por nome\n");
        scanf("%d", &procura);
        while(procura < 0 || procura > 2){
            printf("\nOpcao invalida\n");
            scanf("%d", &procura);
        }
        if(procura == 1){
            while(existe == 0){
                getchar();
                printf("\nQual o telefone?\n");
                scanf("%d", &telefone);
                for(i=0;i<10;i++){
                    if(cliente[i].telefone == telefone){
                        existe = 1;
                        getchar();
                        printf("\nNome: %s\nTelefone: %d\nEndereco: %s\nNumero/Bloco e AP: %s\nBairro: %s\nCidade: %s\n",cliente[i].nome_cliente,cliente[i].telefone,cliente[i].end_rua,cliente[i].end_num,cliente[i].end_bairro,cliente[i].end_cidade);
                        printf("\nConfirma dados do cliente?\n(0) Sim (1) Nao\n");
                        scanf("%d", &confirma);
                        while(confirma < 0 || confirma > 1){
                            getchar();
                            printf("\nOpcao invalida\n");
                            scanf("%d",&confirma);
                        }
                        if(confirma == 0){
                            pedido[posicao].telefone = cliente[i].telefone;
                            strcpy(pedido[posicao].nome_cliente,cliente[i].nome_cliente);
                            strcpy(pedido[posicao].end_rua,cliente[i].end_rua);
                            strcpy(pedido[posicao].end_num,cliente[i].end_num);
                            strcpy(pedido[posicao].end_bairro,cliente[i].end_bairro);
                            strcpy(pedido[posicao].end_cidade,cliente[i].end_cidade);
                            pedido[posicao].situacao = 1;
                            pedido[posicao].avaliacao = 0;
                            pedido[posicao].motoqueiro = 0;
                            printf("\n|O Pedido foi gerado com sucesso|\nInformacoes do pedido:\nCodigo do pedido: %d\n",posicao);
                            printf("\nCodigo pizza: %d | Quantidade: %d | Nome: %s | Valor: %.2f |\nDescricao: %s\n", pedido[posicao].pedidos, pedido[posicao].qtd_pizza, pedido[posicao].nome_pizza, pedido[posicao].valor, pedido[posicao].descricao);
                            printf("Total do pedido: %.2f\nSituacao do pedido - [ em preparacao ]\n", pedido[posicao].valores);
                            return 1;
                            //usuario(cliente);
                        }
                        else if(confirma == 1){
                            existe = 0;
                            break;
                        }
                    }
                    else if(i == 9 && cliente[i].telefone != telefone){
                        printf("\nNao existe um cadastro com esse telefone\n(0) Cadastrar cliente (1) Digitar nome novamente\n");
                        scanf("%d", &confirma);
                        while(confirma != 0){
                            printf("\nOpcao invalida\n");
                            scanf("%d",&confirma);
                        }
                        if(confirma == 1){
                            break;
                        }
                        else {
                            recebecadastrarcliente = cadastrarcliente(cliente);
                            while (recebecadastrarcliente == 2) {
                                recebecadastrarcliente = cadastrarcliente(cliente);
                            }
                        }
                        printf("\nContinue seu pedido...\n");
                        break;
                    }
                }
            }
        }
        else if(procura == 2){
            existe = 0;
            while(existe == 0){
                getchar();
                printf("\nQual o nome do cliente?\n");
                scanf("%[^\n]", nome);
                for(i=0;nome[i] != '\0';i++){
                    nome[i] = toupper(nome[i]);
                }
                for(i=0;i<10;i++){
                    verifica = strcmp(cliente[i].nome_cliente,nome);
                    if(verifica == 0){
                        existe = 1;
                        getchar();
                        printf("\nNome: %s\nTelefone: %d\nEndereco: %s\nNumero/Bloco e AP: %s\nBairro: %s\nCidade: %s\n",cliente[i].nome_cliente,cliente[i].telefone,cliente[i].end_rua,cliente[i].end_num,cliente[i].end_bairro,cliente[i].end_cidade);
                        printf("\nConfirma dados do cliente?\n(0) Sim (1) Nao\n");
                        scanf("%d", &confirma);
                        while(confirma < 0 || confirma > 1){
                            getchar();
                            printf("\nOpcao invalida\n");
                            scanf("%d",&confirma);
                        }
                        if(confirma == 0){
                            pedido[posicao].telefone = cliente[i].telefone;
                            strcpy(pedido[posicao].nome_cliente,cliente[i].nome_cliente);
                            strcpy(pedido[posicao].end_rua,cliente[i].end_rua);
                            strcpy(pedido[posicao].end_num,cliente[i].end_num);
                            strcpy(pedido[posicao].end_bairro,cliente[i].end_bairro);
                            strcpy(pedido[posicao].end_cidade,cliente[i].end_cidade);
                            pedido[posicao].situacao = 1;
                            pedido[posicao].avaliacao = 0;
                            pedido[posicao].motoqueiro = 0;
                            printf("\n|O Pedido foi gerado com sucesso|\nInformacoes do pedido:\nCodigo do pedido: %d\n",posicao);
                            printf("\nCodigo pizza: %d | Quantidade: %d | Nome: %s | Valor: %.2f |\nDescricao: %s\n", pedido[posicao].pedidos, pedido[posicao].qtd_pizza, pedido[posicao].nome_pizza, pedido[posicao].valor, pedido[posicao].descricao);
                            printf("Total do pedido: %.2f\nSituacao do pedido - [ em preparacao ]\n", pedido[posicao].valores);
                            return 1;
                            //usuario(cliente);
                        }
                        else if(confirma == 1){
                            existe = 0;
                            break;
                        }
                    }
                    else if(i == 9 && verifica != 0){
                        getchar();
                        printf("\nNao existe um cadastro com esse nome\n(0) Cadastrar cliente (1) Digitar nome novamente\n");
                        scanf("%d", &confirma);
                        while(confirma < 0 || confirma > 1){
                            getchar();
                            printf("\nOpcao invalida\n");
                            scanf("%d",&confirma);
                        }
                        if(confirma == 1){
                            break;
                        }
                        else {
                            recebecadastrarcliente = cadastrarcliente(cliente);
                            while (recebecadastrarcliente == 2) {
                                recebecadastrarcliente = cadastrarcliente(cliente);
                            }
                        }
                        printf("\nContinue seu pedido...\n");
                        break;
                    }
                }
            }
        }
    }
    else if(procura == 0){
        return 1;
        //usuario(cliente);
    }
}

int despachopizza(cadastro pedido[10]){
    int i, confirma, codigo, verifica = 0, altera = 0, motoboy;
    printf("\n|Lista de pedidos|\n");
    for(i=0;i<10;i++){
        if(pedido[i].pedidos > -1){
            verifica = 1;
            printf("\nPedido codigo: [ %d ] | Situacao: ",i);
            if(pedido[i].situacao == 1){
                printf("[ em preparo ]\n");
            }
            else if(pedido[i].situacao == 2){
                printf("[ a caminho ]\n");
            }
            else if(pedido[i].situacao == 3){
                printf("[ entregue ]\n");
            }
        }
    }
    if(verifica == 0){
        printf("\nNao ha pedidos feitos\n");
        return 1;
    }
    printf("\n(1) Alterar situacao (0) Voltar\n");
    scanf("%d", &confirma);
    while(confirma < 0 || confirma > 1){
        printf("\nOpcao invalida\n");
        scanf("%d", &confirma);
    }
    if(confirma == 1){
        getchar();
        printf("\nQual o codigo do pedido?\n");
        scanf("%d", &codigo);
        while (codigo < 0 || codigo > 9) {
            printf("\nCodigo invalido\n");
            scanf("%d", &codigo);
        }
        if (pedido[codigo].situacao == 2) {
            printf("\nPizza ja esta a caminho\n");
            return 2;
        }
        else if(pedido[codigo].situacao == 3) {
            printf("\nPizza ja foi entregue\n");
            return 2;
        }
        else if(pedido[codigo].cod_pizza == -1){
            printf("\nCodigo nao existe\n");
            return 2;
        }
        else if(pedido[codigo].cod_pizza > -1){
            pedido[codigo].situacao = pedido[codigo].situacao+1;
            printf("\nSeu pedido [ %d ], foi alterado para situacao [ a caminho ]\n", codigo);
            printf("\nQual motoboy esta levando?\n(1) (2) (3)\n");
            scanf("%d", &motoboy);
            while(motoboy < 0 || motoboy > 3){
                printf("\nOpcao invalida\n");
                scanf("%d", &motoboy);
            }
            pedido[codigo].motoqueiro = motoboy;
            printf("\nPedido: [ %d ] | A caminho pelo motoboy: [ %d ]\n",codigo,motoboy);
            return 2;
        }
    }
    if(confirma == 0){
        return 1;
    }
    return 1;
}

int exibirmotoqueiro(cadastro pedido[10]){
    int i, moto1=0, moto2=0, moto3=0, voltar;
    for(i=0;i<10;i++){
        if(pedido[i].motoqueiro == 1 && pedido[i].situacao == 3){
            moto1++;
        }
        if(pedido[i].motoqueiro == 2 && pedido[i].situacao == 3){
            moto2++;
        }
        if(pedido[i].motoqueiro == 3 && pedido[i].situacao == 3){
            moto3++;
        }
    }
    printf("\nMotoboy\tEntregas\n%s\t%d\n%s\t%d\n%s\t%d\n","1",moto1,"2",moto2,"3",moto3);
    printf("\n(0) Voltar\n");
    scanf("%d", &voltar);
    while(voltar != 0){
        getchar();
        printf("\nOpcao invalida\n");
        scanf("%d", &voltar);
    }
    if(voltar == 0){
        return 1;
    }
}

int exibirmontante(cadastro pedido[10]){
    int i, totalpizza = 0, voltar;
    float faturatotal = 0;

    for(i=0;i<10;i++){
        if(pedido[i].qtd_pizza > -1){
            totalpizza +=pedido[i].qtd_pizza;
        }
        if(pedido[i].valores > -1){
            faturatotal += pedido[i].valores;
        }
    }

    printf("\nTotal de pizzas vendidas: [ %d ] | Fatura total: [ %.2f ]\n",totalpizza,faturatotal);
    printf("\n(0) Voltar\n");
    scanf("%d", &voltar);
    while(voltar != 0){
        printf("\nOpcao invalida\n");
        scanf("%d", &voltar);
    }
    if(voltar == 0){
        return 1;
    }
}

int recebepedido(cadastro pedido[10]){
    int codigo, i, verifica=0, confirma, avalia;
    for(i=0;i<10;i++){
        if(pedido[i].pedidos > -1){
            verifica = 1;
        }
    }
    if(verifica == 0){
        printf("\nNao ha pedidos feitos\n");
        return 1;
    }
    printf("\nNumero do pedido?\n");
    scanf("%d", &codigo);
    while(codigo < 0 || codigo > 9){
        printf("\nPedido invalido\n");
        scanf("%d", &codigo);
    }
    if(pedido[codigo].pedidos == -1){
        printf("\nPedido nao existe\n");
        return 1;
    }
    if(pedido[codigo].situacao == 1){
        printf("\nSeu pedido ainda nao saiu para entrega\n");
        return 1;
    }
    printf("\nCliente [ %s ], confirma recebimento do pedido?(0) Sim (1) Nao\n", pedido[codigo].nome_cliente);
    scanf("%d",&confirma);
    while(confirma < 0 || confirma > 1){
        printf("\nOpcao invalida\n");
        scanf("%d", &confirma);
    }
    if(confirma == 1){
        printf("\nNao se preocupe! o estado do seu pedido eh ");
        if(pedido[codigo].situacao == 1){
            printf("[ em preparo ]\n");
        }
        else if(pedido[codigo].situacao == 2){
            printf("[ a caminho ]\n");
        }
        else if(pedido[codigo].situacao == 3){
            printf("[ entregue ]\n");
        }
        return 1;
    }
    else if(confirma == 0){
        printf("\nQue bom que recebeu %s!\nAvalie nossa entrega digitando um valor de 1 - 5, isso nos ajuda a melhorar\n", pedido[codigo].nome_cliente);
        scanf("%d", &avalia);
        while(avalia < 1 || avalia > 5){
            printf("\nDigite um valor de 1 - 5\n");
            scanf("%d", &avalia);
        }
        pedido[codigo].situacao = 3;
        pedido[codigo].avaliacao = avalia;
        printf("\n3,14zzaria agradece a preferencia\n");
        return 1;
    }

}

int listapedidos(cadastro pedido[10]){
    int i, verifica = 0;
    for(i=0;i<10;i++){
        if(pedido[i].pedidos > - 1){
            verifica = 1;
            printf("\nNumero do pedido: %d\n", i);
            printf("Telefone do cliente: %d\n",pedido[i].telefone);
            printf("Codigo da pizza: %d\n", pedido[i].pedidos);
            printf("Codigo motoqueiro: %d\n", pedido[i].motoqueiro);
            printf("Situacao ");
            if(pedido[i].situacao == 1){
                printf("[ em preparo ]\n");
            }
            else if(pedido[i].situacao == 2){
                printf("[ a caminho ]\n");
            }
            else if(pedido[i].situacao == 3){
                printf("[ entregue ]\n");
            }
            printf("Avaliacao: %d\n", pedido[i].avaliacao);
        }
    }
    if(verifica == 0){
        printf("\nNao ha pedidos cadastrados\n");
        return 1;
    }
    printf("\n(0) Voltar\n");
    scanf("%d", &verifica);
    while(verifica != 0){
        printf("\nOpcao invalida\n");
        scanf("%d", &verifica);
    }
    if(verifica == 0){
        return 1;
    }
}

int pizzaria(cadastro pizza[10], cadastro pedido[10]){
    int menu1=-1, recebecadastrarpizza, recebealterapizza, receberemovepizza, recebedespachopizza;
    while(menu1 != 0){
        printf("\n(1) Cadastrar Pizzas\n(2) Alterar dados da pizza\n(3) Remover uma pizza\n(4) Despacho da pizza\n(5) Exibir Motoqueiro\n(6) Exibir Montante\n(0) Voltar\n");
        scanf("%d",&menu1);
        switch (menu1){
            case 1:
               recebecadastrarpizza = cadastrarpizza(pizza);
                while(recebecadastrarpizza == 2){
                    recebecadastrarpizza = cadastrarpizza(pizza);
                }
                break;
            case 2:
                recebealterapizza = alterapizza(pizza);
                while(recebealterapizza == 2) {
                    recebealterapizza = alterapizza(pizza);
                }
                break;
            case 3:
                receberemovepizza = removerpizza(pizza);
                while(receberemovepizza == 2){
                    receberemovepizza = removerpizza(pizza);
                }
                break;
            case 4:
                recebedespachopizza = despachopizza(pedido);
                while(recebedespachopizza == 2){
                    recebedespachopizza = despachopizza(pedido);
                }
                break;
            case 5:
                exibirmotoqueiro(pedido);
                break;
            case 6:
                exibirmontante(pedido);
                break;
            case 0:
                return 0;
                //main
            default:
                printf("\nOpcao invalida\n");
                scanf("%d", &menu1);
                break;
        }
    }
    return 0;
    //main
}

int usuario(cadastro cliente[10],cadastro pizza[10], cadastro pedido[10]){
    int menu1=-1, recebecadastrarcliente, recebealteracliente, receberemovecliente, recebemenupizza;
    while(menu1 != 0) {
        printf("\n(1) Cadastrar cliente\n(2) Alterar dados de cliente\n(3) Remover cliente\n(4) Ver menu de pizzas\n(5) Fazer pedido\n(6) Recebimento do pedido\n(0) Voltar\n");
        scanf("%d", &menu1);
        switch(menu1) {
            case 1:
                 recebecadastrarcliente = cadastrarcliente(cliente);
                 while(recebecadastrarcliente == 2){
                     recebecadastrarcliente = cadastrarcliente(cliente);
                 }
                break;
            case 2:
                recebealteracliente = alteracliente(cliente);
                while(recebealteracliente == 2){
                    recebealteracliente = alteracliente(cliente);
                }
                break;
            case 3:
                receberemovecliente = removercliente(cliente);
                while(receberemovecliente == 2){
                    receberemovecliente = removercliente(cliente);
                }
                break;
            case 4:
               menu_pizza(pizza);
               break;
            case 5:
                fazerpedido(pedido,cliente,pizza);
                break;
            case 6:
                recebepedido(pedido);
                break;
            case 0:
                return 0;
        }
    }
}


int main() {
    int menu1=-1, i;
    cadastro cliente[10], pizza[10], pedido[10];
    for(i=0;i<10;i++){
        pizza[i].cod_pizza = -1;
        cliente[i].telefone = -1;
        pedido[i].pedidos = -1;
        pedido[i].qtd_pizza = -1;
        pedido[i].valores = -1;
    }
    while(&menu1 != 0){
        printf("\nBem vindo a 3,14zzaria\n\nEscolha uma opcao:\n(1) Pizzaria\n(2) Cliente\n(3) Pedidos\n(0) Sair\n");
        scanf("%d", &menu1);
        switch(menu1){
            case 1:
                pizzaria(pizza,pedido);
                break;
            case 2:
                usuario(cliente,pizza,pedido);
                break;
            case 3:
               listapedidos(pedido);
               break;
            case 0:
                printf("\nAte a proxima!\n");
                return 0;
            default:
                printf("\nOpcao invalida\n");
        }
    }
    return 0;
}